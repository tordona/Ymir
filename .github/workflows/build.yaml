name: Build

on:
  workflow_call:
    inputs:
      dev-build:
        required: true
        type: boolean
      build-version:
        required: false
        default: ""
        type: string
      prerelease-version:
        required: false
        default: ""
        type: string

jobs:
  get-project-version:
    runs-on: ubuntu-latest
    outputs:
      project-version: ${{ steps.project-version.outputs.project-version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            CMakeLists.txt
          sparse-checkout-cone-mode: false

      - name: Get project version
        id: project-version
        shell: bash
        run: |
          if [ ${{ inputs.dev-build }} = true ]; then
            echo "project-version=v$(sed -nr "s/project\(Ymir\s+VERSION\s+(\S+)\)/\1/p" CMakeLists.txt)-dev-${GITHUB_SHA::8}" >> "$GITHUB_OUTPUT"
          else
            echo "project-version=${GITHUB_REF_NAME//+/_}" >> "$GITHUB_OUTPUT"
          fi

  build-windows:
    name: windows-${{ matrix.c_compiler }}-${{ matrix.architecture.name }}
    runs-on: ${{ matrix.architecture.runner }}
    needs: [get-project-version]

    strategy:
      fail-fast: false
      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - MSVC (cl) produces much slower code and takes a long time to complete the LTO step
        c_compiler: [clang] # [clang, cl]
        architecture:
          - name: "x86_64-SSE2"
            enable_avx2_option: "OFF"
            runner: windows-latest
            target: x64
          - name: "x86_64-AVX2"
            enable_avx2_option: "ON"
            runner: windows-latest
            target: x64
          - name: "ARM64"
            enable_avx2_option: "OFF"
            # runner: windows-latest
            # target: amd64_arm64
            runner: windows-11-arm
            target: arm64            
        include:
          - c_compiler: clang
            cpp_compiler: clang

    steps:
      # Set up MASM for lzma
      - uses: glslang/setup-masm@v1

      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-windows-${{ matrix.architecture.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Configure MSVC
        if: ${{ matrix.c_compiler == 'cl' }}
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: ${{ matrix.architecture.target }}

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.architecture.enable_avx2_option }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Package Ymir artifact
        run: |
          md licenses
          Copy-Item -Path ".\apps\ymir-sdl3\res\licenses\*"            -Destination ".\licenses\"  -Recurse
          Copy-Item -Path ".\vendor\Catch2\LICENSE.txt"                -Destination ".\licenses\Catch2-LICENSE.txt"
          Copy-Item -Path ".\vendor\cereal\LICENSE"                    -Destination ".\licenses\cereal-LICENSE"
          Copy-Item -Path ".\vendor\concurrentqueue\LICENSE.md"        -Destination ".\licenses\concurrentqueue-LICENSE.md"
          Copy-Item -Path ".\vendor\cxxopts\LICENSE"                   -Destination ".\licenses\cxxopts-LICENSE"
          Copy-Item -Path ".\vendor\fmt\LICENSE"                       -Destination ".\licenses\fmt-LICENSE"
          Copy-Item -Path ".\vendor\imgui\imgui\LICENSE.txt"           -Destination ".\licenses\imgui-LICENSE.txt"
          Copy-Item -Path ".\vendor\libchdr\LICENSE.txt"               -Destination ".\licenses\libchdr-LICENSE.txt"
          Copy-Item -Path ".\vendor\libchdr\deps\lzma-24.05\LICENSE"   -Destination ".\licenses\lzma-LICENSE"
          Copy-Item -Path ".\vendor\libchdr\deps\zlib-1.3.1\LICENSE"   -Destination ".\licenses\zlib-LICENSE"
          Copy-Item -Path ".\vendor\libchdr\deps\zstd-1.5.6\LICENSE"   -Destination ".\licenses\zstd-LICENSE"
          Copy-Item -Path ".\vendor\lz4\lz4\lib\LICENSE"               -Destination ".\licenses\lz4-LICENSE"
          Copy-Item -Path ".\vendor\mio\LICENSE"                       -Destination ".\licenses\mio-LICENSE"
          Copy-Item -Path ".\vendor\rtmidi\LICENSE"                    -Destination ".\licenses\RtMidi-LICENSE"
          Copy-Item -Path ".\vendor\SDL\LICENSE.txt"                   -Destination ".\licenses\SDL-LICENSE.txt"
          Copy-Item -Path ".\vendor\stb\stb\LICENSE"                   -Destination ".\licenses\stb-LICENSE"
          Copy-Item -Path ".\vendor\tomlplusplus\LICENSE"              -Destination ".\licenses\tomlplusplus-LICENSE"
          Copy-Item -Path ".\vendor\xxHash\xxHash\LICENSE"             -Destination ".\licenses\xxHash-LICENSE"
          Copy-Item -Path ".\LICENSE"                                  -Destination ".\licenses\Ymir-LICENSE"
          Compress-Archive -Path "README.md","CHANGELOG.md","licenses/","build/apps/ymir-sdl3/ymir-sdl3.exe" -DestinationPath "${{ steps.strings.outputs.ymir-artifact-name }}.zip"

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.zip

  build-linux:
    name: linux-${{ matrix.c_compiler }}-${{ matrix.architecture.name }}
    runs-on: ${{ matrix.architecture.runner }}
    needs: [get-project-version]

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        # Notes about compilers:
        # - GCC (gcc) gets stuck building sh2.cpp (didn't finish after 12+ hours)
        c_compiler: [clang] # [clang, gcc]
        architecture:
          - name: "x86_64-SSE2"
            enable_avx2_option: "OFF"
            runner: ubuntu-22.04
          - name: "x86_64-AVX2"
            enable_avx2_option: "ON"
            runner: ubuntu-22.04
          - name: "AArch64-NEON"
            enable_avx2_option: "OFF" # doesn't matter actually
            runner: ubuntu-24.04-arm
        include:
          - c_compiler: clang
            cpp_compiler: clang++

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-linux-${{ matrix.architecture.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Install SDL3 Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git make pkg-config \
            cmake ninja-build gnome-desktop-testing \
            libasound2-dev libpulse-dev libaudio-dev \
            libjack-dev libsndio-dev libx11-dev \
            libxext-dev libxrandr-dev libxcursor-dev \
            libxfixes-dev libxi-dev libxss-dev \
            libxtst-dev libxkbcommon-dev libdrm-dev \
            libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
            libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev \
            libudev-dev

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DYmir_AVX2=${{ matrix.architecture.enable_avx2_option }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Package artifacts
        run: |
          mkdir licenses
          cp -Rf apps/ymir-sdl3/res/licenses/* ./licenses/
          cp -f vendor/Catch2/LICENSE.txt              licenses/Catch2-LICENSE.txt
          cp -f vendor/cereal/LICENSE                  licenses/cereal-LICENSE
          cp -f vendor/concurrentqueue/LICENSE.md      licenses/concurrentqueue-LICENSE.md
          cp -f vendor/cxxopts/LICENSE                 licenses/cxxopts-LICENSE
          cp -f vendor/fmt/LICENSE                     licenses/fmt-LICENSE
          cp -f vendor/imgui/imgui/LICENSE.txt         licenses/imgui-LICENSE.txt
          cp -f vendor/libchdr/LICENSE.txt             licenses/libchdr-LICENSE.txt
          cp -f vendor/libchdr/deps/lzma-24.05/LICENSE licenses/lzma-LICENSE
          cp -f vendor/libchdr/deps/zlib-1.3.1/LICENSE licenses/zlib-LICENSE
          cp -f vendor/libchdr/deps/zstd-1.5.6/LICENSE licenses/zstd-LICENSE
          cp -f vendor/lz4/lz4/lib/LICENSE             licenses/lz4-LICENSE
          cp -f vendor/mio/LICENSE                     licenses/mio-LICENSE
          cp -f vendor/rtmidi/LICENSE                  licenses/RtMidi-LICENSE
          cp -f vendor/SDL/LICENSE.txt                 licenses/SDL-LICENSE.txt
          cp -f vendor/stb/stb/LICENSE                 licenses/stb-LICENSE
          cp -f vendor/tomlplusplus/LICENSE            licenses/tomlplusplus-LICENSE
          cp -f vendor/xxHash/xxHash/LICENSE           licenses/xxHash-LICENSE
          cp -f LICENSE                                licenses/Ymir-LICENSE
          tar cJvfh ${{ steps.strings.outputs.ymir-artifact-name }}.tar.xz README.md CHANGELOG.md licenses/ -C build/apps/ymir-sdl3 ymir-sdl3

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.tar.xz

  build-macos:
    name: macos-${{ matrix.arch.name }}
    runs-on: macos-latest
    needs: [get-project-version]

    strategy:
      fail-fast: false

      matrix:
        build_type: [Release]
        arch:
          - name: "universal"
            isa_name: "'x86_64;arm64'"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          export BUILD_VERSION=${{ needs.get-project-version.outputs.project-version }}
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "ymir-artifact-name=ymir-macos-${{ matrix.arch.name }}-${BUILD_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_SHARED_LIBS=OFF
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch.isa_name }}
          -DYmir_ENABLE_IPO=ON
          -DYmir_ENABLE_DEVLOG=OFF
          -DYmir_ENABLE_IMGUI_DEMO=OFF
          -DYmir_ENABLE_SANDBOX=OFF
          -DYmir_ENABLE_YMDASM=OFF
          -DYmir_EXTRA_INLINING=ON
          -DYmir_VERSION_PRERELEASE=${{ inputs.prerelease-version }}
          -DYmir_VERSION_BUILD=${{ inputs.build-version }}
          -DYmir_DEV_BUILD=${{ inputs.dev-build && 'ON' || 'OFF' }}
          -S ${{ github.workspace }}
          -G Ninja

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel

      ## FIXME: Catch2 integration still isn't working
      #- name: Test
      #  working-directory: ${{ steps.strings.outputs.build-output-dir }}
      #  run: ctest --build-config ${{ matrix.build_type }}

      - name: Package artifacts
        run: |
          mkdir licenses
          cp -Rf apps/ymir-sdl3/res/licenses/* ./licenses/
          cp -f vendor/Catch2/LICENSE.txt              licenses/Catch2-LICENSE.txt
          cp -f vendor/cereal/LICENSE                  licenses/cereal-LICENSE
          cp -f vendor/concurrentqueue/LICENSE.md      licenses/concurrentqueue-LICENSE.md
          cp -f vendor/cxxopts/LICENSE                 licenses/cxxopts-LICENSE
          cp -f vendor/fmt/LICENSE                     licenses/fmt-LICENSE
          cp -f vendor/imgui/imgui/LICENSE.txt         licenses/imgui-LICENSE.txt
          cp -f vendor/libchdr/LICENSE.txt             licenses/libchdr-LICENSE.txt
          cp -f vendor/libchdr/deps/lzma-24.05/LICENSE licenses/lzma-LICENSE
          cp -f vendor/libchdr/deps/zlib-1.3.1/LICENSE licenses/zlib-LICENSE
          cp -f vendor/libchdr/deps/zstd-1.5.6/LICENSE licenses/zstd-LICENSE
          cp -f vendor/lz4/lz4/lib/LICENSE             licenses/lz4-LICENSE
          cp -f vendor/mio/LICENSE                     licenses/mio-LICENSE
          cp -f vendor/rtmidi/LICENSE                  licenses/RtMidi-LICENSE
          cp -f vendor/SDL/LICENSE.txt                 licenses/SDL-LICENSE.txt
          cp -f vendor/stb/stb/LICENSE                 licenses/stb-LICENSE
          cp -f vendor/tomlplusplus/LICENSE            licenses/tomlplusplus-LICENSE
          cp -f vendor/xxHash/xxHash/LICENSE           licenses/xxHash-LICENSE
          cp -f LICENSE                                licenses/Ymir-LICENSE
          zip -r ${{ github.workspace }}/${{ steps.strings.outputs.ymir-artifact-name }}.zip licenses README.md CHANGELOG.md
          cd ${{ github.workspace }}/build/apps/ymir-sdl3/
          zip ${{ github.workspace }}/${{ steps.strings.outputs.ymir-artifact-name }}.zip ymir-sdl3

      - name: Upload Ymir artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.strings.outputs.ymir-artifact-name }}
          path: ${{ steps.strings.outputs.ymir-artifact-name }}.zip
